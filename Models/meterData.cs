// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var meterRead = MeterRead.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using QuickType;

    public partial class MeterRead
    {
        [JsonProperty("readMeter")]
        public ReadMeter ReadMeter { get; set; }
    }

    public partial class ReadMeter
    {
        [JsonProperty("Requested")]
        public long Requested { get; set; }

        [JsonProperty("ReadSet")]
        public ReadSet[] ReadSet { get; set; }
    }

    public partial class ReadSet
    {
        [JsonProperty("Meter")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Meter { get; set; }

        [JsonProperty("Group")]
        public long Group { get; set; }

        [JsonProperty("Interval")]
        public long Interval { get; set; }

        [JsonProperty("Protocol")]
        public string Protocol { get; set; }

        [JsonProperty("MAC_Addr")]
        public string MacAddr { get; set; }

        [JsonProperty("Tz_Offset_Sec")]
        public long TzOffsetSec { get; set; }

        [JsonProperty("Bad_Reads")]
        public long BadReads { get; set; }

        [JsonProperty("Good_Reads")]
        public long GoodReads { get; set; }

        [JsonProperty("Credits")]
        public long Credits { get; set; }

        [JsonProperty("ReadData")]
        public MeterData[] ReadData { get; set; }
    }

    public partial class MeterData
    {
        [JsonProperty("Good")]
        public long Good { get; set; }

        [JsonProperty("Date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("Time")]
        public DateTimeOffset Time { get; set; }

        [JsonProperty("Time_Stamp_UTC_ms")]
        public long TimeStampUtcMs { get; set; }

        

        [JsonProperty("kWh_Tot")]
        public string KWhTot { get; set; }


        [JsonProperty("RMS_Volts_Ln_1")]
        public string RmsVoltsLn1 { get; set; }

        [JsonProperty("RMS_Volts_Ln_2")]
        public string RmsVoltsLn2 { get; set; }

        [JsonProperty("RMS_Volts_Ln_3")]
        public string RmsVoltsLn3 { get; set; }

        [JsonProperty("Amps_Ln_1")]
        public string AmpsLn1 { get; set; }

        [JsonProperty("Amps_Ln_2")]
        public string AmpsLn2 { get; set; }

        [JsonProperty("Amps_Ln_3")]
        public string AmpsLn3 { get; set; }


        public DateTime timestamp { get; set; }
    }

    public partial class MeterRead
    {
        public static MeterRead FromJson(string json) => JsonConvert.DeserializeObject<MeterRead>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MeterRead self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
